apiVersion: v1
kind: BuildConfig
metadata:
  name: inventory-service-pipeline
  labels:
    name: inventory-service-pipeline
  annotations:
    pipeline.alpha.openshift.io/uses: '[{"name": "inventory-service", "namespace": "msa-store-dev", "kind": "DeploymentConfig"}, {"name": "inventory-service", "namespace": "msa-store-prod", "kind": "DeploymentConfig"}]'
spec:
  triggers:
    -
      type: GitHub
      github:
        secret: secret101
    -
      type: Generic
      generic:
        secret: secret101
  runPolicy: Serial
  source:
    type: None
  strategy:
    type: JenkinsPipeline
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        node ('nodejs') {
          stage ('Build') {
            openshiftBuild(namespace: 'msa-store-dev', bldCfg: 'inventory-service', showBuildLogs: 'true')
          }
          stage ('Deploy Dev') {
            openshiftDeploy(namespace: 'msa-store-dev', depCfg:  'inventory-service')
          }
          stage ('Acceptance Tests') {
            sleep 13
          }
          stage ('Promote to Prod') {
            openshiftTag(namespace: 'msa-store-dev', sourceStream:'inventory-service', sourceTag:'latest', destinationStream:'inventory-service', destinationTag:'promoteToProd')
          }
          stage ('Deploy Prod') {
            sh "oc project msa-store-prod"
            sh "oc get service inventory-service -n msa-store-prod -o template --template='{{ .spec.selector.color }}' > route-target"
            def newTarget = getNewTarget()
            openshiftDeploy(namespace: 'msa-store-prod', depCfg:  "inventory-service-${newTarget}")
          }
          stage ('Go live?') {

            def newTarget = getNewTarget()
            def currentTarget = getCurrentTarget()

            input "Switch Production from ${currentTarget} to ${newTarget} ?"

            sh "oc patch -n msa-store-prod service/inventory-service --patch '{\"spec\":{\"selector\":{\"color\":\"${newTarget}\"}}}'"

          }
        }

        def getCurrentTarget() {
          def currentTarget = readFile 'route-target'
          return currentTarget
        }

        // Flip/flop target (green goes blue and vice versa)
        def getNewTarget() {
          def currentTarget = getCurrentTarget()
          def newTarget = ""
          if (currentTarget == "blue") {
              newTarget = "green"
          } else if (currentTarget == "green") {
              newTarget = "blue"
          } else {
            echo "OOPS, wrong target"
          }
          return newTarget
        }

  output:
  resources:
  postCommit:
